openapi: 3.0.0
info:
  title: Swagger Docs
  description: Project to learn API documentation using swagger
  version: 1.0.0
  contact:
    name: API Support
    email: shubhampurwar35@gmail.com

servers:
  - url: '{protocol}://localhost:4000/api/{version}'
    description: Localhost server (when app is in development stage)
    variables:
      protocol:
        enum: [http, https]
        default: http
      version:
        enum: [v1, v2]
        default: v1

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
        course:
          type: string
        price:
          type: number
          format: int64
      required:
        - id
        - course
        - price

    ArrayOfCourses:
      type: array
      items:
        schema:
          $ref: '#/components/schemas/Course'

    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
      required:
        - success
        - message

  requestBody:
    Course:
      description: A JSON object containing id, course and price
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'

  responses:
    BadRequestError:
      description: Malformed URL syntax
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Server doesn't know how to handle the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - BasicAuth: []
    ApiKeyAuth: []
  - BearerAuth: []
    ApiKeyAuth: []

paths:
  /courses:
    get:
      tags:
        - Array
      summary: Gets a list of courses
      description: Returns a JSON array of course objects containing id, course and price
      responses:
        '200':
          description: All resources fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCourses'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /course:
    get:
      tags:
        - Object
      summary: Gets a course
      description: Returns a JSON object containing id, course and price
      responses:
        '200':
          description: Resource fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Request body
      summary: Adds a course
      description: Adds a new course to the courses array
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        $ref: '#/components/requestBody/Course'
      responses:
        '201':
          description: 'Resource created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCourses'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /course/{courseId}:
    parameters:
      - in: path
        name: courseId
        description: Unique ID of course
        required: true
        schema:
          type: string

    get:
      tags:
        - Path parameters
      summary: Gets a course by courseId
      description: Returns a course object containing id, course and price
      responses:
        '200':
          description: Resource fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Path parameters and request body
      summary: Updates a course
      description: Finds a course by courseId and updates it
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        $ref: '#/components/requestBody/Course'
      responses:
        '201':
          description: 'Resource updated'
          content:
            appication/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCourses'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Path parameters
      summary: Deletes a course
      description: Finds a course by courseId and deletes it
      responses:
        '200':
          description: 'Resource deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCourses'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /search:
    get:
      tags:
        - Query parameters
      summary: Searches a course
      description: Finds a course based on course name and price and returns it
      parameters:
        - in: query
          name: course
          description: Course name
          required: true
          schema:
            type: string
            enum: [JavaScript, React.js, Node.js, MongoDB, PostgreSQL]
        - in: query
          name: price
          description: Course price
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Resource found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /upload:
    post:
      tags:
        - File upload
      description: Uploads image on a server
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: header
          name: Auth
          required: true
          schema:
            type: string
          description: Auth token
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
            encoding:
              image:
                content-type: image/png, image/jpg, image/jpeg
      responses:
        '201':
          description: File successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  image:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
